/*******************************************************************************
* Copyright (C) 2016-2019 Advanced Micro Devices, Inc. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell cop-
* ies of the Software, and to permit persons to whom the Software is furnished
* to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IM-
* PLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNE-
* CTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*******************************************************************************/

/**************************************************
* This file was generated by Tensile:             *
* https://github.com/ROCmSoftwarePlatform/Tensile *
**************************************************/


#include "Solutions.h"
#include <algorithm>
TensileStatus Cijk_Ailk_Bjlk_ZB_MT32x48x8_SE_(
    SolutionLock * solutionLock,
    TensileComplexDouble * dataD,
    const TensileComplexDouble * dataC,
    const TensileComplexDouble * dataA,
    const TensileComplexDouble * dataB,
    TensileComplexDouble alpha,
    TensileComplexDouble beta,
    unsigned int strideD1J,
    unsigned int strideD2K,
    unsigned int strideC1J,
    unsigned int strideC2K,
    unsigned int strideA1L,
    unsigned int strideA2K,
    unsigned int strideB1L,
    unsigned int strideB2K,
    unsigned int sizeI,
    unsigned int sizeJ,
    unsigned int sizeK,
    unsigned int sizeL,
    hipStream_t stream,
    unsigned int numInputEvents,
    hipEvent_t * inputEvents,
    hipEvent_t * outputEvent) {
  TensileStatus status;
  int deviceId;
  hipGetDevice(&deviceId);

  /* kernels */
  const unsigned int numKernels = 1; // 1 or 4

  /* num kernels */
  unsigned int numEnqueues[numKernels] = { 1 };

  /* grid sizes */
  const unsigned int workDim = 3;
  const unsigned int threadTile[2] = { 4, 6 };
  const unsigned int groupSize[2] = { 8, 8 };
  size_t localWorkSize[3] = {  64, 1, 1 };
  size_t globalWorkSize[numKernels][3];
  globalWorkSize[0][2] = 1;
  globalWorkSize[0][2] *= sizeK;
  unsigned int sizeOfC0 = sizeI;
  unsigned int sizeOfC1 = sizeJ;
  unsigned int macroTile0 = static_cast<unsigned int>(groupSize[0] * threadTile[0]);
  unsigned int macroTile1 = static_cast<unsigned int>(groupSize[1] * threadTile[1]);
  unsigned int totalWorkGroups0 = sizeOfC0 / macroTile0;
  unsigned int totalWorkGroups1 = sizeOfC1 / macroTile1;
  // b/c single kernel, add extra work-group here if edge needed
  if (totalWorkGroups0*macroTile0 < sizeOfC0) { totalWorkGroups0++; }
  if (totalWorkGroups1*macroTile1 < sizeOfC1) { totalWorkGroups1++; }
  unsigned int problemNumGroupTiles0 = totalWorkGroups0;
  unsigned int problemNumGroupTiles1 = totalWorkGroups1;
  const unsigned smallNumMagicShift = 31; // bozo, review
  unsigned magicNumberProblemNumGroupTiles0 = (1L<<smallNumMagicShift) / problemNumGroupTiles0 + 1; // bozo, review
  unsigned numFullBlocks =  problemNumGroupTiles1 / 1; // divide by WorkGroupMapping
  unsigned wgmRemainder1 =  problemNumGroupTiles1 % 1;
  if (wgmRemainder1 == 0) wgmRemainder1 = 1;
  unsigned magicNumberWgmRemainder1 = ((1L<<smallNumMagicShift) / wgmRemainder1 + 1);
  globalWorkSize[0][0] = totalWorkGroups0;
  globalWorkSize[0][1] = totalWorkGroups1;

  /* index sizes */
  unsigned int sizes[numKernels][1][4];
  sizes[0][0][0] = sizeI;
  sizes[0][0][1] = sizeJ;
  sizes[0][0][2] = sizeK;
  sizes[0][0][3] = sizeL;
  uint64_t tensor2dSizeC = 1 * std::max(sizeI, strideC1J) * std::max(sizeJ, strideC2K);
  uint64_t tensor2dSizeA = 1;
  uint64_t tensor2dSizeAStride = 0;
  uint64_t tensor2dSizeAOffset = 0;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeI, (uint64_t)strideA1L);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeI;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeAStride = std::max(tensor2dSizeA*sizeL, (uint64_t)strideA2K);
  tensor2dSizeAOffset += tensor2dSizeAStride - tensor2dSizeA*sizeL;
  tensor2dSizeA = tensor2dSizeAStride;
  tensor2dSizeA -= tensor2dSizeAOffset;

  uint64_t tensor2dSizeB = 1;
  uint64_t tensor2dSizeBStride = 0;
  uint64_t tensor2dSizeBOffset = 0;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeJ, (uint64_t)strideB1L);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeJ;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeBStride = std::max(tensor2dSizeB*sizeL, (uint64_t)strideB2K);
  tensor2dSizeBOffset += tensor2dSizeBStride - tensor2dSizeB*sizeL;
  tensor2dSizeB = tensor2dSizeBStride;
  tensor2dSizeB -= tensor2dSizeBOffset;

  unsigned int staggerUIter = 32; // how many stride-sized clicks to stagger start offset
  int unrollLoopIters = sizeL/8/1; // /DepthU/GSU
  while (staggerUIter>1) {
    if (unrollLoopIters >= (staggerUIter*2)) {
      break;}
    staggerUIter /= 2; // step down to smaller stagger
  }
  if (staggerUIter>=1) staggerUIter -= 1;

  int kernelsLaunched=0;


  /* kernel 0: Cijk_Ailk_Bjlk_ZB_MT32x48x8_SE_K1 */
  unsigned int kernelIdx = 0;
  for (unsigned int enqueueIdx = 0; enqueueIdx < numEnqueues[0]; enqueueIdx++) {
    if( inputEvents != NULL )
      hipEventRecord(inputEvents[enqueueIdx], stream );
    try {
      kernelsLaunched++;
  std::cout << "sizeI sizeJ sizeK sizeL" << std::endl;
  std::cout <<  sizes[kernelIdx][enqueueIdx][0]  << std::endl;
  std::cout <<  sizes[kernelIdx][enqueueIdx][1]  << std::endl;
  std::cout <<  sizes[kernelIdx][enqueueIdx][2]  << std::endl;
  std::cout <<  sizes[kernelIdx][enqueueIdx][3]  << std::endl;
      hipLaunchKernelGGL(
        HIP_KERNEL_NAME(Cijk_Ailk_Bjlk_ZB_MT32x48x8_SE_K1),
        dim3(globalWorkSize[kernelIdx][0], globalWorkSize[kernelIdx][1], globalWorkSize[kernelIdx][2]),
        dim3(localWorkSize[0], localWorkSize[1], localWorkSize[2]),
        0, // groupMemBytes
        stream,
        dataD,
        dataC,
        dataA,
        dataB,
        alpha,
        beta,
        strideD1J,
        strideD2K,
        strideC1J,
        strideC2K,
        strideA1L,
        strideA2K,
        strideB1L,
        strideB2K,
        sizes[kernelIdx][enqueueIdx][0],
        sizes[kernelIdx][enqueueIdx][1],
        sizes[kernelIdx][enqueueIdx][2],
        sizes[kernelIdx][enqueueIdx][3]
        ,staggerUIter
        ,problemNumGroupTiles0
        ,problemNumGroupTiles1
        ,magicNumberProblemNumGroupTiles0
        );
      } catch (const std::exception& e) {
#ifdef DEBUG
        std::cerr << e.what() << std::endl;
#endif
        return tensileStatusFailure;
      }
      if( outputEvent != NULL )
        hipEventRecord(outputEvent[enqueueIdx], stream );
  }

  return tensileStatusSuccess;
}

/* Solution Parameters
  ProblemType: Cijk_Ailk_Bjlk_ZB
  ProblemType: Cijk_Ailk_Bjlk_ZB
  LoopDoWhile: False
  LoopTail: True
  EdgeType: ShiftPtr
  InnerUnroll: 1
  LocalDotLayout: 1
  AggressivePerfMode: 1
  KernelLanguage: Source
  LdsPadA: 0
  LdsPadB: 0
  MaxOccupancy: 40
  VectorWidth: 1
  MinGlobalWriteVectorWidth: 1
  VectorStore: True
  GlobalReadVectorWidth: 1
  GlobalReadCoalesceVectorA: True
  GlobalReadCoalesceVectorB: True
  GlobalReadCoalesceGroupA: True
  GlobalReadCoalesceGroupB: True
  PrefetchGlobalRead: False
  PrefetchLocalRead: False
  UnrollMemFence: False
  GlobalRead2A: True
  GlobalRead2B: True
  LocalWrite2A: True
  LocalWrite2B: True
  LocalRead2A: True
  LocalRead2B: True
  SuppressNoLoadLoop: False
  ExpandPointerSwap: False
  ScheduleGlobalRead: 1
  ScheduleLocalWrite: 1
  ScheduleIterAlg: 1
  LdcEqualsLdd: True
  InterleaveAlpha: 0
  OptNoLoadLoop: 1
  PrefetchAcrossPersistent: 0
  BufferLoad: False
  BufferStore: True
  DirectToLds: False
  UseSgprForGRO: 0
  AssertSummationElementMultiple: 1
  AssertFree0ElementMultiple: 1
  AssertFree1ElementMultiple: 1
  AssertMinApproxSize: 0
  CheckTensorDimAsserts: False
  CheckDimOverflow: 0
  StaggerU: 32
  StaggerUStride: 256
  StaggerUMapping: 0
  GlobalSplitU: 1
  GlobalSplitUSummationAssignmentRoundRobin: True
  GlobalSplitUWorkGroupMappingRoundRobin: False
  MacroTileShapeMin: 1
  MacroTileShapeMax: 64
  PersistentKernel: 0
  PackBatchDims: 0
  PackFreeDims: 1
  PackGranularity: 2
  FractionalLoad: False
  VectorAtomicWidth: 1
  NumLoadsCoalescedA: 1
  NumLoadsCoalescedB: 3
  WorkGroup: [8, 8, 1]
  WorkGroupMappingType: B
  WorkGroupMapping: 1
  ThreadTile: [4, 6]
  DisableKernelPieces: 0
  DepthU: 8
  PerformanceSyncLocation: -1
  PerformanceWaitLocation: -1
  PerformanceWaitCount: -1
  NonTemporalC: 0
  NonTemporalA: 0
  NonTemporalB: 0
  ReplacementKernel: False
  Valid: True
  AssignedProblemIndependentDerivedParameters: True
  AssignedDerivedParameters: False
  SubGroup0: 8
  SubGroup1: 8
  LocalSplitU: 1
  NumThreads: 64
  ThreadTile0: 4
  ThreadTile1: 6
  MacroTile0: 32
  MacroTile1: 48
  ThreadTileA: 4
  ThreadTileB: 6
  SubGroupA: 8
  SubGroupB: 8
  MacroTileA: 32
  MacroTileB: 48
  DirectToLdsA: False
  DirectToLdsB: False
  LocalWriteUseSgprA: False
  LocalWriteUseSgprB: False
  PackedC0Indices: ['I']
  PackedC1Indices: ['J']
  _staggerStrideShift: 1
  NumElementsPerThread: 24
  GlobalWriteVectorWidth: 1
  NumGlobalWriteVectorsPerThread: 24
  GlobalLoadVectorWidthA: 1
  NumLoadsA: 4
  GlobalLoadVectorWidthB: 1
  NumLoadsB: 6
  NumLoadsPerpendicularA: 4
  LSCA: 32
  LSPA: 2
  NumLoadsPerpendicularB: 2
  LSCB: 16
  LSPB: 4
  LVCA: 32
  LVPA: 2
  LVCB: 16
  LVPB: 4
  LdsOffsetA: 0
  LdsOffsetB: 256
  LdsNumElements: 640
  LoopUnroll: 8
  GuaranteeNoPartialA: True
  GuaranteeNoPartialB: True
*/

